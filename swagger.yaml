openapi: 3.0.0
security:
  - bearerAuth: []
info:
  title: Cinemax API
  description: API документация Cinemax приложения
tags:
  - name: Auth
    description: API для авторизации и аутентификации пользователей
  - name: Users
    description: API для работы с пользователями
  - name: Movies
    description: API для работы с фильмами
paths:
  /api/login:
    post:
      summary: Авторизация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Успешная авторизация
  /api/registration:
    post:
      summary: Регистрация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Успешная регистрация
  /api/logout:
    post:
      summary: Выход пользователя
      tags:
        - Auth
      responses:
        "200":
          description: Успешный выход
  /api/refresh:
    get:
      summary: Обновление токена
      tags:
        - Auth
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
          description: Куки с токеном обновления
      responses:
        "200":
          description: Токен успешно обновлен
  /api/users:
    get:
      summary: Получить список пользователей
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    email:
                      type: string
                    password:
                      type: string
                  example:
                    - id: 1
                      email: "email@email.com"
                      password: "e2e41234"
    delete:
      summary: Удалить пользователя
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: id
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
      responses:
        "200":
          description: Пользователь успешно удален
  /api/movies:
    get:
      summary: Получить список всех фильмов
      operationId: getMovies
      tags:
        - Movies

      responses:
        "200":
          description: Список фильмов успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
    post:
      summary: Создать новый фильм
      operationId: createMovie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                img:
                  type: string
                  format: binary
                  description: Изображение фильма
                video:
                  type: string
                  format: binary
                  description: Видеофайл фильма
                otherData:
                  $ref: "#/components/schemas/MovieWithoutFiles"
      responses:
        "200":
          description: Фильм успешно создан
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
  /api/movies/{id}:
    get:
      summary: Получить фильм по ID
      operationId: getMovie
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Данные фильма успешно получены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
    patch:
      summary: Обновить фильм
      operationId: updateMovie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                img:
                  type: string
                  format: binary
                  description: Изображение фильма
                video:
                  type: string
                  format: binary
                  description: Видеофайл фильма
                otherData:
                  $ref: "#/components/schemas/MovieWithoutFiles"
      responses:
        "200":
          description: Фильм успешно обновлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
    delete:
      summary: Удалить фильм
      operationId: deleteMovie
      tags:
        - Movies
      responses:
        "200":
          description: Фильм успешно удален
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    MovieWithoutFiles:
      type: object
      properties:
        name:
          type: string
        duration:
          type: integer
          nullable: true
        year_of_creation:
          type: string
          format: date-time
          nullable: true
        estimations:
          type: array
          items:
            type: integer
        genre:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        artors:
          type: array
          items:
            $ref: "#/components/schemas/ActorOnMovie"
        directors:
          type: array
          items:
            $ref: "#/components/schemas/DirectorOnMovie"

    Movie:
      allOf:
        - $ref: "#/components/schemas/MovieWithoutFiles"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            img:
              type: string
              description: URL изображения
            video:
              type: string
              description: URL видео

    ActorOnMovie:
      type: object
      properties:
        actorId:
          type: integer
          format: int64
        movieId:
          type: integer
          format: int64

    DirectorOnMovie:
      type: object
      properties:
        directorId:
          type: integer
          format: int64
        movieId:
          type: integer
          format: int64
